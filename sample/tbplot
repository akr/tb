#!/usr/bin/env ruby
#
# Copyright (C) 2011-2013 Tanaka Akira  <akr@fsij.org>
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above
#     copyright notice, this list of conditions and the following
#     disclaimer in the documentation and/or other materials provided
#     with the distribution.
#  3. The name of the author may not be used to endorse or promote
#     products derived from this software without specific prior
#     written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
# OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
# GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
# EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# plot a graph using gnuplot.

# usage:
#   tbplot [options] table-filename [image-filename]

require 'tb/cmdtop'

$x_field = nil
$y_field = nil
$shape_field = nil
$color_field = nil
$size_field = nil
$facet_x_field = nil
$facet_y_field = nil
$max_size = nil
$logx = nil
$logy = nil
$prompt = nil
$gnuplot_terminal = nil

def process_options(argv)
  op = OptionParser.new
  op.def_option('-x FIELD,...', 'x-fields') {|f| $x_field = split_field_list_argument(f).map {|ff| AxisScale.new(ff) } }
  op.def_option('-y FIELD,...', 'y-fields') {|f| $y_field = split_field_list_argument(f).map {|ff| AxisScale.new(ff) } }
  op.def_option('--shape=FIELD', 'shape-field') {|f| $shape_field = f }
  op.def_option('--color=FIELD', 'color-field') {|f| $color_field = f }
  op.def_option('--size=FIELD', 'size-field') {|f| $size_field = f }
  op.def_option('--facet-x=FIELD', 'facet-x-field') {|f| $facet_x_field = f }
  op.def_option('--facet-y=FIELD', 'facet-y-field') {|f| $facet_y_field = f }
  op.def_option('--shapecolor=FIELD', 'shape-field and color-field') {|f| $shape_field = $color_field = f }
  op.def_option('--max-size=MAX-SIZE', 'maximum point size') {|v| $max_size = v.to_f }
  op.def_option('--loglog', 'use full log scale') {|v| $logx = $logy = true }
  op.def_option('--logx', 'use log scale for x-axis') {|v| $logx = true }
  op.def_option('--logy', 'use log scale for y-axis') {|v| $logy = true }
  op.def_option('--prompt', 'enter gnuplot interactive mode') {|v| $prompt = true }
  op.def_option('--gnuplot-terminal=TERMINAL', 'gnuplot terminal.  e.g. "png size 500,500"') {|v| $gnuplot_terminal = v }

  op.parse!(argv)

  if !$max_size
    if $size_field
      $max_size = 100.0
    else
      $max_size = 1.0
    end
  end
end

def gnuplot_escape_string(string)
  string = string.dup.force_encoding("ascii-8bit") if string.respond_to? :force_encoding
  '"' + string.gsub(/[^A-Za-z]/) {|c| sprintf("\\%03o", c.ord) } + '"'
end

class ValueChecker
  def initialize
    @total = 0
    @numeric = 0
    @numeric_min = @numeric_max = nil
    @time = 0
    @time_min = @time_max = nil
    @values = {}
  end
  attr_reader :total, :numeric, :time
  attr_reader :numeric_min, :numeric_max
  attr_reader :time_min, :time_max
  attr_reader :values

  def categorical_index(val)
    @values.fetch(val)
  end

  def check(val)
    ret = val
    if val.kind_of? Numeric
      @numeric += 1
      if @numeric == 1
        @numeric_min = @numeric_max = val
      else
        @numeric_min = val if val < @numeric_min
        @numeric_max = val if @numeric_max < val
      end
    elsif /\A\s*-?(\d+)\s*\z/ =~ val
      v = val.to_i
      @numeric += 1
      if @numeric == 1
        @numeric_min = @numeric_max = v
      else
        @numeric_min = v if v < @numeric_min
        @numeric_max = v if @numeric_max < v
      end
    elsif /\A\s*-?(\d+\.\d*|\.\d+)([eE][-+]?\d+)?\s*\z/ =~ val
      v = val.to_f
      @numeric += 1
      if @numeric == 1
        @numeric_min = @numeric_max = v
      else
        @numeric_min = v if v < @numeric_min
        @numeric_max = v if @numeric_max < v
      end

    elsif /\A\s*-?\d+-\d\d(-\d\d(T\d\d(:\d\d(:\d\d(\.\d+)?(Z|[+-]\d\d:?\d\d)?)?)?)?)?\s*\z/ =~ val ||
       /\A\s*-?\d+\d\d\d\dT\d\d(\d\d(\d\d(\.\d+)?(Z|[+-]\d\d:?\d\d)?)?)?\s*\z/ =~ val
      @time += 1
      t = Time.parse(val).utc
      t = tweak_timezone(t)
      if @time == 1
        @time_min = @time_max = t
      else
        @time_min = t if t < @time_min
        @time_max = t if @time_max < t
      end
      ret = t.iso8601
    end
    @values[ret] ||= @values.size + 1
    ret
  end

  def tweak_timezone(t)
    # gnuplot supports UTC only.
    # So this (not-so-valid) tweak is required.
    unless defined? @time_offset
      @time_offset = Time.now.utc_offset
    end
    t + @time_offset
  end

  def tic_format
    if 0 < @time
      if @time_min.year == @time_max.year &&
         @time_min.mon  == @time_max.mon &&
         @time_min.day  == @time_max.day
        "%H:%M"
      else
        "%Y\n%m-%d"
      end
    else
      "% g"
    end
  end
end

class AxisScale
  # create an AxisScale object.
  #
  #   AxisScale.new("fieldname")
  #   AxisScale.new("log(fieldname)")
  def initialize(desc)
    @desc = desc
    if /\Alog\((.*)\)\z/ =~ desc
      @field = $1
      @logscale = true
    else
      @field = desc
      @logscale = false
    end
  end
  attr_reader :desc, :field
  attr_accessor :logscale
end

def bind_fields(header0, checkers)
  header = header0.dup
  fields = [$shape_field, $color_field, $size_field, $facet_x_field, $facet_y_field]
  fields.concat $x_field.map {|as| as.field } if $x_field
  fields.concat $y_field.map {|as| as.field } if $y_field
  fields.each {|f|
    if f && !header.include?(f)
      err("field not found: #{f.inspect}")
    end
  }
  header -= fields.compact
  if !$x_field
    if header.empty?
      err("x-field not found")
    end
    $x_field = [AxisScale.new(header.shift)]
  end
  if !$y_field
    if header.empty?
      err("y-field not found")
    end
    $y_field = [AxisScale.new(header.shift)]
  end
  if !$shape_field && !$color_field && !header.empty?
    $shape_field = $color_field = header.shift
  end
  if $logx
    $x_field.each {|axis| axis.logscale = true }
  end
  if $logy
    $y_field.each {|axis| axis.logscale = true }
  end
  uniq_fields = [$shape_field, $color_field, $size_field, $facet_x_field, $facet_y_field].compact.uniq
end

def input_table(table_filename)
  tmps = {}
  checkers = {}

  r = Tb.open_reader(table_filename).to_fileenumerator

  r.use {
    r.with_header {|header|
      header.each {|f|
        checkers[f] ||= ValueChecker.new
      }
    }.each {|pairs|
      pairs.each {|f, v|
        checkers[f].check(v)
      }
    }

    uniq_fields = nil
    r.with_header {|header0|
      uniq_fields = bind_fields(header0, checkers)
    }.each {|pairs|
      $x_field.each {|x_scale|
        x_field = x_scale.field
        $y_field.each {|y_scale|
          y_field = y_scale.field
          next if uniq_fields.any? {|f| pairs[f].nil? }
          next if pairs[x_field].nil?
          vs = {}
          vs[x_field] = checkers[x_field].check(pairs[x_field])
          vs[y_field] = checkers[y_field].check(pairs[y_field])
          uniq_fields.each {|f|
            vs[f] = checkers[f].check(pairs[f])
          }
          x = vs[x_field]
          y = vs[y_field]

          size = 1
          if $shape_field
            shape = vs[$shape_field]
          end
          if $color_field
            color = vs[$color_field]
          end
          if $size_field
            size = vs[$size_field]
          end
          if $facet_x_field
            facet_x = vs[$facet_x_field]
          end
          if $facet_y_field
            facet_y = vs[$facet_y_field]
          end
          key1 = [facet_x, facet_y, x_scale, y_scale]
          key2 = [shape, color]
          tmps[key1] ||= {}
          tmps[key1][key2] ||= Tempfile.new('tbplot')
          tmps[key1][key2].puts "#{x} #{y} #{size}"
        }
      }
    }
  }
  return checkers, tmps
end

def output_gnuplot(checkers, tmps, table_filename, image_filename)
  tmps.each {|k1, h| h.each {|k2, v| v.close } }
  gnuplot_command = ''

  if image_filename
    if $gnuplot_terminal
      gnuplot_command << "set term #{$gnuplot_terminal}\n"
    else
      case image_filename
      when /\.png\z/
        gnuplot_command << "set term png\n"
      when /\.eps\z/
        gnuplot_command << "set term epscairo\n"
      when /\.ps\z/
        gnuplot_command << "set term postscript\n"
      when /\.pdf\z/
        gnuplot_command << "set term pdfcairo\n"
      when /\.svg\z/
        gnuplot_command << "set term svg\n"
      when /\.jpeg\z|\.jpg\z/
        gnuplot_command << "set term jpeg\n"
      else
        err("unknown image filename extension: #{image_filename.inspect}")
      end
    end
    gnuplot_command << "set output #{gnuplot_escape_string image_filename}\n"
  end

  whole_title = File.basename(table_filename).sub(/\..*\z/, '')
  gnuplot_command << "set title #{gnuplot_escape_string(whole_title)}\n"

  gnuplot_command << 'set timefmt "%Y-%m-%dT%H:%M:%SZ"' << "\n"
  use_multiplot = false
  if $facet_x_field || $facet_y_field || 1 < $x_field.length || 1 < $y_field.length
    use_multiplot = true
    x_numgraph = ($facet_x_field ? checkers[$facet_x_field].values.size : 1) * $x_field.length
    y_numgraph = ($facet_y_field ? checkers[$facet_y_field].values.size : 1) * $y_field.length
    xsize = 1.0 / x_numgraph
    ysize = 1.0 / y_numgraph
    gnuplot_command << "set multiplot\n"
    gnuplot_command << "set size #{xsize},#{ysize}\n"
  end

  tmps.each {|(facet_x, facet_y, x_scale, y_scale), h|
    x_field = x_scale.field
    y_field = y_scale.field
    gnuplot_command << (x_scale.logscale ? "set" : "unset") << " logscale x\n"
    gnuplot_command << (y_scale.logscale ? "set" : "unset") << " logscale y\n"
    if 0 < checkers[x_field].time
      gnuplot_command << "set xdata time\n"
      gnuplot_command << "set format x #{gnuplot_escape_string(checkers[x_field].tic_format)}\n"
    end
    if 0 < checkers[y_field].time
      gnuplot_command << "set ydata time\n"
      gnuplot_command << "set format y #{gnuplot_escape_string(checkers[y_field].tic_format)}\n"
    end
    gnuplot_command << "set xlabel #{gnuplot_escape_string(x_field)}\n"
    gnuplot_command << "set ylabel #{gnuplot_escape_string(y_field)}\n"
    if $size_field
      pointsize = $max_size / checkers[$size_field].numeric_max
      gnuplot_command << "set pointsize #{pointsize}\n"
    end

    gnuplot_command << "set key outside\n"
    key_title = []
    key_title << $shape_field if $shape_field
    key_title << $color_field if $color_field
    if !key_title.empty?
      key_title = key_title.uniq.join(' ')
      gnuplot_command << "set key title #{gnuplot_escape_string(key_title)}\n"
    end

    if use_multiplot
      x_graphindex = 0.0
      if $facet_x_field
        x_graphindex += (checkers[$facet_x_field].categorical_index(facet_x)-1) * $x_field.length
      end
      x_graphindex += $x_field.index(x_scale)
      xorigin = x_graphindex / x_numgraph
      y_graphindex = 0.0
      if $facet_y_field
        y_graphindex += (checkers[$facet_y_field].categorical_index(facet_y)-1) * $y_field.length
      end
      y_graphindex += $y_field.index(y_scale)
      yorigin = (y_numgraph - y_graphindex - 1) / y_numgraph
      gnuplot_command << "set origin #{xorigin},#{yorigin}\n"
    end
    gnuplot_command << 'plot '
    first = true
    h.each {|(shape_value, color_value), tmp|
      if $shape_field
        shape = checkers[$shape_field].categorical_index(shape_value)
      end
      if $color_field
        color = checkers[$color_field].categorical_index(color_value)
      end
      gnuplot_command << ",\\\n" if !first
      gnuplot_command << gnuplot_escape_string(tmp.path)
      gnuplot_command << ' using 1:2:3 '
      title = []
      if shape_value
        title << " #{shape_value.to_s}"
      end
      if color_value
        title << " #{color_value.to_s}"
      end

      title = title.uniq.join(' ')
      gnuplot_command << ' title ' << gnuplot_escape_string(title)
      gnuplot_command << ' with points'
      if shape
        gnuplot_command << " pointtype " << shape.to_s # xxx: some mapping
      else
        gnuplot_command << " pointtype 1"
      end
      if color
        gnuplot_command << " linecolor " << color.to_s # xxx: some mapping
      else
        gnuplot_command << " linecolor 1"
      end
      gnuplot_command << " pointsize variable"
      first = false
    }
    gnuplot_command << "\n"
  }
  if use_multiplot
    gnuplot_command << "unset multiplot\n"
  end
  if !image_filename && !$prompt
    gnuplot_command << "pause mouse any\n"
  end
  tmp_gnuplot_command = Tempfile.new(['tbplot', '.gp'])
  tmp_gnuplot_command << gnuplot_command
  tmp_gnuplot_command.close
  #puts gnuplot_command; sleep 100
  args = ['gnuplot', tmp_gnuplot_command.path]
  if $prompt
    args << '-' # enter interactive mode.
  end
  system(*args)
end

def main_body(argv)
  process_options(argv)
  argv = ['-'] if argv.empty?
  table_filename = argv.shift
  image_filename = argv.shift
  checkers, tmps = input_table(table_filename)
  output_gnuplot(checkers, tmps, table_filename, image_filename)
end

def main(argv)
  main_body(argv)
rescue SystemExit
  $stderr.puts $!.message if $!.message != 'exit'
  raise
end

main(ARGV)
