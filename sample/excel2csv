#!/usr/bin/ruby

# sample/excel2csv - XLS to CSV converter using Microsoft Excel via WIN32OLE.
#
# Copyright (C) 2011 Tanaka Akira  <akr@fsij.org>
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
#  1. Redistributions of source code must retain the above copyright notice, this
#     list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright notice,
#     this list of conditions and the following disclaimer in the documentation
#     and/or other materials provided with the distribution.
#  3. The name of the author may not be used to endorse or promote products
#     derived from this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
# OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
# OF SUCH DAMAGE.

# works only on Windows with Microsoft Excel.
# (This script invokes Excel using win32ole.)

# usage:
#   excel2csv [opts] filename.xls ...
#
# options:
#   -h : show help message
#   -a : convert all sheets (sheet name is prepended to all rows)
#   -f : prepend filename for all rows
#   --mergecells=fill : set the value for all cells in a merged cells
#   --mergecells=topleft : set the value for the top left cell in a merged cells

require 'table'

require 'win32ole'
require 'optparse'
require 'find'
require 'pp'

def getAbsolutePath(filename)
  fso = WIN32OLE.new('Scripting.FileSystemObject')
  return fso.GetAbsolutePathName(filename)
end

module Excel
end

$opt_all_sheets = false
$opt_prepend_filename = false
$opt_mergecells = 'fill'
$opt_border = false

op = OptionParser.new
op.def_option('-h', 'show help message') { puts op; exit true }
op.def_option('-a', 'convert all sheets (sheet name is prepended to all rows)') { $opt_all_sheets = true }
op.def_option('-f', 'prepend filename for all rows') { $opt_prepend_filename = true }
op.def_option('--mergecells=mode', '"fill" or "topleft"') {|v| $opt_mergecells = v }
op.def_option('--border', 'extract borders') { $opt_border = true }
op.parse!(ARGV)

def convert_cell(cell)
  if !cell.MergeCells
    v = cell.Value
  else
    c_row = cell.Row
    c_col = cell.Column
    mergearea = cell.MergeArea
    m_row = mergearea.Row
    m_col = mergearea.Column
    m_numrows = mergearea.Rows.Count
    m_numcols = mergearea.Columns.Count
    val = cell.MergeArea.Item(1,1).Value
    if $opt_mergecells == 'topleft'
      if c_row == m_row && c_col == m_col
	v = val
      else
	v = nil
      end
    else
      v = val
    end
  end
  v
end

def convert_horizontal_borders(sheet_xrange, sheet_yrange, usedrange, upper_y)
  # upper_y is base 1.
  lower_y = upper_y+1
  min = 0
  max = usedrange.Columns.Count*2
  usedrange_xoff = usedrange.Column-1
  usedrange_yoff = usedrange.Row-1
  usedrange_width = usedrange.Columns.Count
  usedrange_height = usedrange.Rows.Count
  ary = []
  min.upto(max) {|i|
    if (i & 1) == 0
      # border
      left_x = i / 2
      right_x = left_x + 1
      upperleft_cell = (sheet_yrange.include?(usedrange_yoff+upper_y) && sheet_yrange.include?(usedrange_xoff+left_x)) ?
                       usedrange.Cells(upper_y, left_x) : nil
      upperright_cell = (sheet_yrange.include?(usedrange_yoff+upper_y) && sheet_xrange.include?(usedrange_xoff+right_x)) ?
			usedrange.Cells(upper_y, right_x) : nil
      lowerleft_cell = (sheet_yrange.include?(usedrange_yoff+lower_y) && sheet_xrange.include?(usedrange_xoff+left_x)) ?
                       usedrange.Cells(lower_y, left_x) : nil
      lowerright_cell = (sheet_yrange.include?(usedrange_yoff+lower_y) && sheet_xrange.include?(usedrange_xoff+right_x)) ?
      			usedrange.Cells(lower_y, right_x) : nil
      upper_line = lower_line = left_line = right_line = false
      if (!upperleft_cell || !upperright_cell ||
          !upperleft_cell.MergeCells || !upperright_cell.MergeCells ||
	  upperleft_cell.MergeArea.Row != upperright_cell.MergeArea.Row ||
	  upperleft_cell.MergeArea.Column != upperright_cell.MergeArea.Column) &&
         ((upperleft_cell && upperleft_cell.borders(Excel::XlEdgeRight).linestyle != Excel::XlNone) ||
          (upperright_cell && upperright_cell.borders(Excel::XlEdgeLeft).linestyle != Excel::XlNone))
	upper_line = true
      end
      if (!lowerleft_cell || !lowerright_cell ||
          !lowerleft_cell.MergeCells || !lowerright_cell.MergeCells ||
	  lowerleft_cell.MergeArea.Row != lowerright_cell.MergeArea.Row ||
	  lowerleft_cell.MergeArea.Column != lowerright_cell.MergeArea.Column) &&
         ((lowerleft_cell && lowerleft_cell.borders(Excel::XlEdgeRight).linestyle != Excel::XlNone) ||
          (lowerright_cell && lowerright_cell.borders(Excel::XlEdgeLeft).linestyle != Excel::XlNone))
	lower_line = true
      end
      if (!upperleft_cell || !lowerleft_cell ||
          !upperleft_cell.MergeCells || !lowerleft_cell.MergeCells ||
	  upperleft_cell.MergeArea.Row != lowerleft_cell.MergeArea.Row ||
	  upperleft_cell.MergeArea.Column != lowerleft_cell.MergeArea.Column) &&
         ((upperleft_cell && upperleft_cell.borders(Excel::XlEdgeBottom).linestyle != Excel::XlNone) ||
          (lowerleft_cell && lowerleft_cell.borders(Excel::XlEdgeTop).linestyle != Excel::XlNone))
	left_line = true
      end
      if (!upperright_cell || !lowerright_cell ||
          !upperright_cell.MergeCells || !lowerright_cell.MergeCells ||
	  upperright_cell.MergeArea.Row != lowerright_cell.MergeArea.Row ||
	  upperright_cell.MergeArea.Column != lowerright_cell.MergeArea.Column) &&
         ((upperright_cell && upperright_cell.borders(Excel::XlEdgeBottom).linestyle != Excel::XlNone) ||
          (lowerright_cell && lowerright_cell.borders(Excel::XlEdgeTop).linestyle != Excel::XlNone))
	right_line = true
      end
      if upper_line && lower_line && !left_line && !right_line
        joint = '|'
      elsif !upper_line && !lower_line && left_line && right_line
        joint = '-'
      elsif upper_line || lower_line || left_line || right_line
        joint = '+'
      else
        joint = nil
      end
      ary << joint
    else
      # cell
      hborder = nil
      cell_x = (i+1) / 2
      upper_cell = (0 < upper_y) ? usedrange.Cells(upper_y, cell_x) : nil
      lower_cell = (0 < lower_y) ? usedrange.Cells(lower_y, cell_x) : nil
      if (!upper_cell || !lower_cell ||
          !upper_cell.MergeCells || !lower_cell.MergeCells ||
	  upper_cell.MergeArea.Row != lower_cell.MergeArea.Row ||
	  upper_cell.MergeArea.Column != lower_cell.MergeArea.Column) &&
         ((upper_cell && upper_cell.borders(Excel::XlEdgeBottom).linestyle != Excel::XlNone) ||
          (lower_cell && lower_cell.borders(Excel::XlEdgeTop).linestyle != Excel::XlNone))
        hborder = '-'
      end
      ary << hborder
    end
  }
  #puts ary.map {|c| c || '.' }.join('')
  #ary = ary.map {|c| c || ' ' }
  ary
end

def convert_vertical_border(sheet_xrange, sheet_yrange, usedrange, y, left_x)
  usedrange_xoff = usedrange.Column-1
  right_x = left_x+1
  left_cell = sheet_xrange.include?(usedrange_xoff+left_x) ? usedrange.Cells(y, left_x) : nil
  right_cell = sheet_xrange.include?(usedrange_xoff+right_x) ? usedrange.Cells(y, right_x) : nil
  vborder = nil
  if (!left_cell || !right_cell ||
      !left_cell.MergeCells || !right_cell.MergeCells ||
      left_cell.MergeArea.Row != right_cell.MergeArea.Row ||
      left_cell.MergeArea.Column != right_cell.MergeArea.Column) &&
     ((left_cell && left_cell.borders(Excel::XlEdgeRight).linestyle != Excel::XlNone) ||
      (right_cell && right_cell.borders(Excel::XlEdgeLeft).linestyle != Excel::XlNone))
    vborder = '|'
  end
  #vborder ||= ' '
  vborder
end

def generate_csv_row(csvgen, row)
  row = row.dup
  row.pop while !row.empty? && row.last.nil?
  csvgen << row
end

def convert_sheet(filename, sheet, csvgen)
  sheetname = sheet.Name
  allrange = sheet.Cells
  sheet_xrange = 1..(allrange.Columns.Count)
  sheet_yrange = 1..(allrange.Rows.Count)
  usedrange = sheet.UsedRange
  sheet_header = []
  sheet_header << filename if $opt_prepend_filename
  sheet_header << sheetname if $opt_all_sheets
  generate_csv_row(csvgen, sheet_header + convert_horizontal_borders(sheet_xrange, sheet_yrange, usedrange, 0)) if $opt_border
  y = 1
  usedrange.Rows.each do |row|
    record = []
    record << convert_vertical_border(sheet_xrange, sheet_yrange, usedrange, y, 0) if $opt_border
    x = 1
    row.Columns.each do |cell|
      v = convert_cell(cell)
      record << v
      #record << ' '
      record << convert_vertical_border(sheet_xrange, sheet_yrange, usedrange, y, x) if $opt_border
      x += 1
    end
    generate_csv_row(csvgen, sheet_header + record)
    generate_csv_row(csvgen, sheet_header + convert_horizontal_borders(sheet_xrange, sheet_yrange, usedrange, y)) if $opt_border
    y += 1
  end
end

excel = WIN32OLE.new('Excel.Application')
WIN32OLE.const_load(excel,Excel)
begin
  excel.displayAlerts = false
  Table.csv_stream_output(STDOUT) {|csvgen|
    ARGV.each {|excel_filename|
      if File.directory? excel_filename
        filenames = []
	Find.find(excel_filename) {|path| filenames << path if /\.xls\z/ =~ path }
      else
        filenames = [excel_filename]
      end
      filenames.each {|ifn0|
	ifn = getAbsolutePath(ifn0)
	wb = excel.Workbooks.Open(ifn)
	begin
	  if $opt_all_sheets
	    wb.Worksheets.each {|sheet|
	      sheetname = sheet.Name
	      convert_sheet(ifn0, sheet, csvgen)
	    }
	  else
	    convert_sheet(ifn0, wb.Worksheets(1), csvgen)
	  end
	ensure
	  wb.Close
	end
      }
    }
  }
ensure
  excel.Quit
end
